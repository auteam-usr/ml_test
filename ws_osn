КОНКУРСНОЕ ЗАДАНИЕ КОМПЕТЕНЦИИ «СЕТЕВОЕ И СИСТЕМНОЕ АДМИНИСТРИРОВАНИЕ»
для возрастной категории Основная


Модуль А.  (Аудит) 
Задания: 
Руководство частной IT-школы из-за низкой квалификации бывшего системного администратора столкнулось с рядом проблем. Было принято решение пригласить Вас, как высококлассного специалиста, для их решения.
Перед Вами поставлены три задачи, описанных в техническом задании, которые нужно решить за очень короткий промежуток времени. К сожалению, поскольку специалиста в организации не осталось, некоторые из требовании могут звучать не очень внятно. Но вы же высококлассный специалист и, конечно, поймёте о чём идёт речь.
УДАЧИ!
Предыдущий специалист имел настолько низкую квалификацию, что за всё время обслуживания существующей локальной сети так и не собрал необходимую сетевую документацию. Это стало серьезной проблемой, когда пользователи стали обращаться с жалобами на некачественную работу некоторых сервисов.
Ваша первая задача – составить всю необходимую для обслуживания сети документацию. Бланки для Вас уже подготовлены (приложение №1).
Кроме того, от пользователей поступает жалоба на работу одного из приложений.
Предыдущий администратор с ними уже пообщался и записал результаты опроса в отдельный бланк (Приложение №2). Определите в чём проблема, запишите первопричину в предоставленный бланк и попытайтесь устранить её.
В выполнении задания есть один серьёзный нюанс – Вы работаете удалённо, поэтому физически обнаружить устройства не представляется возможным, а все операции придётся выполнять с компьютера администратора.
Реквизиты доступа к компьютеру администратора:
· Протокол: VNC
· IP-адрес: ...
· Порт: ...
· Логин/Пароль: ...
Спецификация оценки
В рамках данного модуля оцениваются навыки аудита имеющейся сетевой инфраструктуры.
Проверка результатов выполнения задания осуществляется оценивающими экспертами сразу по окончании выделенного на модуль времени. В дальнейшем проверка данного модуля осуществляться не будет.

Модуль Б.  (Настройка технических и программных средств информационно-коммуникационных систем)
Задания: 
1.	В школе созданы два компьютерных класса для изучения операционных систем Windows и Linux. В каждом классе есть компьютерные места учеников и место преподавателя. Какие-то настройки бывший специалист пытался сделать, но неизвестно что и насколько правильно. Нужно проверить и при необходимости настроить окружение классов, при этом:
1.1.	Все устройства должны иметь доступ в интернет. Для этих задач бывший администратор установил маршрутизатор, который уже подключён к провайдеру, но настроить его скорее всего не успел
1.2.	Администратор сказал, что классы нужно обязательно развести по разным сетям. Мы не знаем, что это значит, но раз надо - сделайте
1.3.	Также с администратором был разговор о том, чтобы устройства преподавателей и учеников настраивались автоматически для получения доступа в интернет
1.4.	В организации действует жесткая политика использования интернет-ресурсов:
1.4.1.	Для учеников в интернете должны быть доступны только два ресурса:
· https://gb.ru/
· https://dnevnik.ru/
1.4.2.	Для преподавателей, кроме двух перечисленных также можно использовать
https://firpo.ru/
1.5.	Для контроля за учениками, каждому преподавателю нужно дать возможность в режиме реального времени управлять рабочими местами учеников в своём классе. Нам очень советовали программу veyon
1.6.	Для доступа к устройствам нужны учетные записи пользователей. Они должны управляться централизованно, чтоб можно было при необходимости добавлять или удалять записи. Требуются следующие учётные записи:
1.6.1.	Десять студенческих: логин/пароль - studentX/P@ssw0rd, где ‘X’ – порядковый номер (от 1 до 10)
1.6.2.	Две преподавательских: логин/пароль - teacherX/P@ssw0rd, где ‘X’ – порядковый номер (от 1 до 2)
1.6.3.	Одна административная: логин/пароль - admin/P@ssw0rd
1.7.	Все права для пользователей в системе должны подчиняться принципу «минимальных и достаточных»:
1.7.1.	Ученики имеют минимальные права: только запуск установленных программ (установка запрещена), создание файлов и каталогов только в домашнем каталоге и на соответствующем сетевом ресурсе
1.7.2.	Преподаватели права, аналогичные ученикам, но с возможностью доступа к сетевому ресурсу учеников
1.7.3.	Администратор – максимальные права
1.8.	Напишите простенький мануал по управлению пользователями для вашего решения
(желательно с картинками, чтоб понятнее было)
1.9.	Так же администратор должен иметь возможность централизованно, со своего рабочего места, устанавливать нужные программы, размещённые в сетевом каталоге apps, на компьютеры в классах. Желательно, чтоб решение было простым, но универсальным (напомним, есть компьютеры с Windows и Linux). Выбор решения за вами, но также нужен мануал, описывающий как это сделать.
1.10.	Всем пользователям необходимо сетевое хранилище для обмена файлами:
1.10.1.	Для учащихся – это каталог students. В нём они должны иметь полные права
1.10.2.	Для преподавателей – каталог teachers. В нём они должны иметь полные
права, а также преподаватели должны иметь полные права на каталог students
1.10.3.	Для администратора – каталог apps. Администратор должен иметь полные права на все сетевые каталоги.
1.10.4.	Необходимо для каждого пользователя на рабочем столе разместить ярлыки для доступа к тем каталогам, к которым они имеют право на доступ.
2.	Школе необходима система электронного обучения и сайт на основе CMS. Для этих нужд школа приобрела два виртуальных сервера. Вам необходимо:
2.1.	Установить систему электронного обучения
2.1.1.	Она должна быть доступна с компьютеров в классах по адресу https://elearning.it-school.ru
2.1.2.	При переходе не должно возникать ошибок
2.1.3.	Система должна быть интегрирована с учетными записями в сети
2.1.4.	Система должна продолжать работать даже при выключении одного из двух серверов
2.2.	Установить сайт:
2.2.1.	Сайт должен быть доступен с компьютеров в классе по адресу https://www.it-school.ru
2.2.2.	При переходе не должно возникать ошибок
2.2.3.	Сайт должен продолжать работать даже при выключении одного из двух серверов
Все файлы и архивы, необходимые для решения задания расположены в каталоге по ссылке: _______________________________________
Спецификация оценки
В рамках данного модуля оцениваются навыки проектирования и развёртывания сетевой инфраструктуры.
Проверка результатов выполнения задания осуществляется оценивающими экспертами сразу по окончании выделенного на модуль времени. В дальнейшем проверка данного модуля осуществляться не будет.

Модуль В.  (Обеспечение отказоустойчивости)
Время на выполнение модуля 5 часов
Задания: 
Данный модуль содержит задачи, основанных на практиках DevOps при разработке и эксплуатации информационных систем в сфере разработки современного программного обеспечения.

Главной задачей данного модуля является создание элементов автоматизированной инфраструктуры с помощью инструментов для работы с облачными средами и управления контейнерами. В рамках задания вам будет предоставлен доступ к инфраструктуре облачного провайдера. В качестве основной задачи необходимо подготовить инструкции для полностью автоматического развёртывания приложения вместе со всеми необходимыми службами в облаке.
Для выполнения задания на ваших локальных компьютерах будет обеспечен доступ к сети Интернет.

ИНСТРУКЦИИ ДЛЯ УЧАСТНИКА
Вход в личный кабинет облачного провайдера доступен по адресу https://mcs.mail.ru , учётная запись будет вам выдана непосредственно перед началом выполнения задания.
Все пункты задания необходимо реализовать на стороне провайдера облачной инфраструктуры. Эксперты будут ожидать наличие работоспособных элементов инфраструктуры согласно заданию.
Пункты задания, касающиеся настройки облака, потребуют от вас написания автоматизированных сценариев развёртывания инфраструктуры согласно заданию. Конкретные инструменты выбираются на усмотрение участников. По завершении выполнения задания, ожидается, что участники полностью удалят автоматически созданные машины, сетевые и другие настройки в облачной инфраструктуре. Эксперты при проверке будут выполнять скрипт и проверять, что за отведённое (20 минут) время вся инфраструктура создаётся и работает должным образом.
Для проверки работоспособности скриптов автоматического развертывания инфраструктуры, эксперты могут проверять их работу в отдельной учётной записи того же облачного провайдера. Вам необходимо предусмотреть возможность указания необходимых параметров для работы скриптов с другой учетной записью облачного провайдера.
Проверка будет выполняться с инстанса ControlVM, вы можете установить все
необходимые для вашей работы инструменты на указанную машину.

Подготовка машины ControlVM

1. Вся проверка выполнения задания будет проводиться с машины ControlVM.
2. НЕ удаляйте ControlVM по завершении задания.
3. Создайте инстанс с именем ControlVM и подключите его к сети интернет.
1. Тип виртуальной машины: Standard-2-2.
2. Размер диска: 10 ГБ.
3. Тип диска: SSD.
4. Отключите мониторинг и резервное копирование.
5. Операционная система: Ubuntu 20.04.
6. Разрешите внешние подключения по протоколу SSH.
7. Сохраните ключевую пару для доступа на рабочем столе вашего локального ПК с расширением .pem
4. Настройте внешнее подключение к ControlVM.
1. Установите на локальный ПК клиент SSH PuTTY.
2. Создайте в PuTTY профиль с именем VKCLoud.
3. Убедитесь в возможности установления соединения с ControlVM с локального ПК с помощью клиента PuTTY без ввода дополнительных параметров.
4. Используйте для подключения имя пользователя ubuntu и загруженную ключевую пару.

Подготовка облачной инфраструктуры

1. Подготовьте сценарий автоматизации развёртывания облачной инфраструктуры.
1. Виртуальные машины и сети должны быть созданы согласно Топологии.
2. Имена виртуальных машин и сетей должны соответствовать Топологии.
3. Обеспечьте подключение виртуальных машин к соответствующим сетям.
4. В случае предоставления внешнего доступа к созданным виртуальным машинам, он должен быть разрешён только по протоколу ssh.
5. Разрешите трафик по протоколу ICMP.
6. Вы можете назначить глобальные IP адреса для управления созданными виртуальными машинами.
7. Используйте аутентификацию на основе открытых ключей, аутентификация с использованием пароля должна быть отключена для SSH.
8. Создайте балансировщик нагрузки.
1. Сохраните внешний адрес балансировщика нагрузки в файле
/home/ubuntu/lb.ip.
2. Ограничьте внешний доступ протоколами http и https.
3. Балансировка нагрузки должна использовать алгоритм round robin.
4. При обращении на внешний адрес балансировщика нагрузки должен выводиться ответ от приложения на внутреннем сервере.
2. Виртуальные машины должны соответствовать следующим характеристикам.
1. Операционная система: Ubuntu.
2. Количество vCPU: 1.
3. Объём оперативной памяти: 1024 МБ.
4. Объём диска: 5 ГБ.
5. Тип диска: HDD.
6. Разместите виртуальные машины в регионе Москва.
7. Разместите Web1 в зоне доступности MS1.
8. Разместите Web2 в зоне доступности GZ1.
3. На машине ControlVM создайте скрипт cloudinit.sh.
1. В качестве рабочей директории используйте путь /home/ubuntu/bin.
2. Используйте файл /home/ubuntu/bin/cloud.conf для указания настроек для подключения к облачному провайдеру.
1. При выполнении проверки, эксперты могут изменить настройки только в файле cloud.conf. Другие файлы редактироваться не будут.
2. Вы можете оставить любые понятные комментарии в файле cloud.conf.
3. В качестве шаблона файла cloud.conf можно использовать следующую структуру:
#!/usr/bin/env bash
#Существующий ID проекта в облаке
PROJECT_ID='34359eb284cc44c98b9fac5e435d7a57'
#Имя пользователя для подключения к облачному провайдеру
USER_NAME='skill39@ moscow.local'
#Пароль в открытом виде для подключения к облачному провайдеру
PASSWORD='P@ssw0rd'
3. Скрипт должен выполняться из любой директории без явного указания пути к исполняемому файлу.
4. Выполнение задания ожидается с использованием инструментов Terraform и/или OpenStack CLI. Однако, вы вправе выбрать другие инструменты, не противоречащие условиям задания и правилам соревнования.

Развертывание приложений в Docker
1. На машине ControlVM.
1. Установите Docker и Docker Compose.
2. Создайте локальный Docker Registry.
3. В домашней директории хоста создайте файл name.txt и запишите в него строку experts.
4. Напишите Dockerfile для приложения HelloRosatom.
1. В качестве базового образа используйте alpine
2. Сделайте рабочей директорию /hello и скопируйте в неё name.txt
3. Контейнер при запуске должен выполнять команду echo, которая выводит сообщение "Hello, Rosatom! Greetings from " и затем содержимое файла name.txt, после чего завершать свою работу.
5. Соберите образ приложения App1 и загрузите его в ваш Registry.
1. Используйте номер версии 1.0 для вашего приложения
2. Образ должен быть доступен для скачивания и дальнейшего запуска на локальной машине.
6. Создайте в домашней директории пользователя ubuntu файл wiki.yml для приложения MediaWiki.
1. Средствами docker compose должен создаваться стек контейнеров с
приложением MediaWiki и базой данных.
1. Используйте два сервиса
2. Основной контейнер MediaWiki должен называться wiki и использовать
образ mediawiki
3. Файл LocalSettings.php с корректными настройками должен находиться
в домашней папке пользователя ubuntu и автоматически
монтироваться в образ.
4. Контейнер с базой данных должен называться db и использовать образ
mysql
5. Он должен создавать базу с названием mediawiki, доступную по
стандартному порту, для пользователя wiki с паролем @tomski!!s
6. База должна храниться в отдельном volume с названием dbvolume
7. База данных должна находиться в одной сети с приложением App2, но
не должна быть доступна снаружи.
8. MediaWiki должна быть доступна извне через порт 80.
7. Настройте мониторинг с помощью NodeExporter, Prometheus и Grafana.
1. Создайте в домашней директории пользователя ubuntu файл monitoring.yml для Docker Compose
1. Используйте контейнеры NodeExporter, Prometheus и Grafana для сбора, обработки и отображения метрик.
2. Настройте Dashboard в Grafana, в котором будет отображаться загрузка CPU, объём свободной оперативной памяти и места на диске.
3. Интерфейс Grafana должен быть доступен по внешнему адресу на порту 3000.

Развёртывания облачных сервисов

1. На машине ControlVM создайте скрипт /home/ubuntu/bin/DeployApp.sh.
1. Скрипт должен выполняться из любой директории без явного указания пути к
исполняемому файлу.
2. Подготовьте web-приложение App1
1. Скачайте файлы app1.py и Dockerfile по адресу:
https://github.com/ilyaurtk/moscow39
2. Соберите образ приложения и загрузите его в любой репозиторий Docker на ваше усмотрение.
3. Команда DeployApp.sh должна запускать средства автоматизации для настройки
операционных систем.
1. Разверните web-приложение App1 из репозитория Docker на виртуальных
машинах Web1 и Web2.
2. Обеспечьте балансировку нагрузки между Web1 и Web2.
3. Обеспечьте внешний доступ к web-приложению по протоколу https.
4. При обращении по протоколу http должно выполняться автоматическое
перенаправления на протокол https.
5. Обеспечивать доверие сертификату не требуется.

По завершению рабочего времени
•	Высвободите выделенные ресурсы облачного провайдера для автоматически
•	созданных объектов.
•	Удалите все автоматически созданные виртуальные машины, сети, объекты, ресурсы.
•	НЕ удаляйте ControlVM и необходимые для её работы ресурсы.
Обратите внимание, что при наличии в облачной инфраструктуре существующих объектов, за исключением объектов, необходимых для работы ControlVM, объектов по умолчанию проверка осуществляться не будет.



